/*
Script to model the experimental system described in the paper
"Shapes of a filament on the surface of a bubble" :
https://royalsocietypublishing.org/doi/10.1098/rspa.2021.0353
Part of the scripts for the Morpho paper
https://doi.org/10.48550/arXiv.2208.07859
to produce Figure 4. 

Here, we have a spherical bubble with a bendable wetted filament
lying on its surface. Constrained on one end at the North pole, the
filament is subject to internal bending energy and gravity. We aim to
find the shape of the filament given two non-dimensional parameters:
phi: the ratio of the length of the filament to the radius of the
sphere, and 
Omega_g: inverse of the elasto-gravitaty bendability. 

Higher the Omega_g, stronger the gravitaitonal effects, and lower the
Omega_g, stronger the bending effects.
*/
import meshtools
import optimize
import plot 
import vtk
import povray 
import "sortMesh.morpho"

class Filament {
    // Initialize the filament with a given value of OmegaInv and phi,
    // the two dimensionless parameters explored in the paper.
    init(OmegaInv, phi) {
        
        self.OmegaInv = OmegaInv
        self.phi = phi // phi = 2*Pi covers a great circle of the sphere exactly
        self.R = 1.0
        self.f = 0.7
        self.up = Matrix([0,0,1])
        self.regulator = 5
        self.N = 20 // Number of elements to discretize the filament
        self.m = LineMesh(fn (t) [self.R*sin(t)*cos(self.f*t), self.R*sin(t)*sin(self.f*t), self.R*cos(t)], 0..self.phi:Pi/self.N) 
        // self.m = LineMesh(fn (t) [self.R*sin(t), 0, self.R*cos(t)-self.R], 0..self.phi:Pi/self.N) 

        self.m0 = self.m.clone() 

        // Select the top end, to be fixed later
        self.top = Selection(self.m, fn(x,y,z) x^2+y^2+(z-self.R)^2<0.0001)

        self.visualize()
    
    }

    setupProblem() {

        self.problem = OptimizationProblem(self.m) 

        // Bending energy
        self.linecurv = LineCurvatureSq()
        self.problem.addenergy(self.linecurv, prefactor=self.OmegaInv) 

        // Gravitational potential energy
        self.gravity = LineIntegral(fn (x) x.inner(self.up)) 
        self.problem.addenergy(self.gravity)

        self.problem.addconstraint(Length())
        
        // Constraint for the filament to lie on the sphere
        self.lc = ScalarPotential(fn (x,y,z) x^2+y^2+z^2-self.R^2, fn (x,y,z) Matrix([2*x,2*y,2*z]))
        self.problem.addlocalconstraint(self.lc) 

        // Regularizer to ensure similar-sized elements
        self.eq = EquiElement()
        self.problem.addenergy(self.eq, prefactor=self.regulator) 

    }

    setupOptimizer() {
        self.setupProblem()
        self.opt = ShapeOptimizer(self.problem, self.m) 

        self.fixedRegion = self.top
        // Fixing the top end of the filament
        self.opt.fix(self.fixedRegion)

        self.opt.stepsize = 0.002
        //opt.linesearch(10000) 
        // opt.relax(10000)
    }


    // Function to wriggle the filament a little bit, to get it out of a
    // local extremum and break symmetry. This is done by adding a small
    // noise to the vertex positions

    wriggle(noise=0.05) {
        var rm = LineMesh(fn(t) noise*Matrix([(random()-0.5), (random()-0.5), (random()-0.5)]), 1..self.m.count())
        var rmat = rm.vertexmatrix()
        var vert = self.m.vertexmatrix()
        self.m.setvertexmatrix(vert + rmat)
        self.m.setvertexposition(0, Matrix([0,0,self.R]))

    }

    // Function to equilibrate a given configuration
    equilibrate() {
        self.opt.conjugategradient(10000)
        self.visualize(title = "final")
    }

    // Function to equilibrate a given configuration with `iters` number of refinements
    equilibrateWithRefine(iters=2) {
        // self.opt.relax(5000)
        // self.opt.linesearch(100000)
        self.opt.conjugategradient(500)
        for (i in 1..iters) {
            self.refineFilament()
            self.opt.conjugategradient(10000)
        }
        self.visualize(title = "final")
    }

    // Function to refine the mesh
    refineFilament() {
        self.mr = MeshRefiner([self.m, self.fixedRegion])
        self.refmap = self.mr.refine()

        // Now refinement is done update the problems and optimizers
        // for (el in [self.problem, self.opt]) el.update(self.refmap)

        // Use the new mesh and field
        self.m = self.refmap[self.m]
        self.fixedRegion = self.refmap[self.fixedRegion]
        // Must ensure boundary remains correctly fixed
        self.opt.fixed = []
        self.opt.fix(self.fixedRegion)
        // self.l0 = self.length() / self.m.count(1)
        self.setupOptimizer()
    }

    computeCurvature() {
        var lcsq = LineCurvatureSq()
        lcsq.integrandonly=true
        var en = lcsq.integrand(self.m)
        var f = Field(self.m, 0.0)
        for (i in 0...self.m.count()) f[i] = sqrt(en[0,i])
        return f
    }

    export(filename="filament.vtk") {
        var f = self.computeCurvature()
        VTKExporter(f, fieldname="curvature").export(filename)
    }

    exportCurvatureVsArclength(filename="curvature", loop=false) {

        var len = Length()
        var m = self.m.clone()
        var en = self.computeCurvature()
        VTKExporter(en, fieldname="curvature").export(filename)
        var sort = sortMesh(m)

        var lseg = len.integrand(m)
        var f = File("${filename}.txt", "write")
        if (loop) {
            for (i in 0...m.count()) {
                f.write("${lseg[0,i]}\t${en[i]}\t${sort[i]}")
            }
        }
        else {
            f.write("0\t${en[0,0]}\t${sort[0]}")
            for (i in 1...m.count()) {
                f.write("${lseg[0,i-1]}\t${en[i]}\t${sort[i]}")
            }
        }
        f.close()
    }
    
    visualize(title="Morpho") {

        var gball=Graphics()
        gball.display(Sphere([0,0,0], self.R-0.05)) 
        gball.display(Arrow([0,0,self.R], [0,0,self.R+0.2])) 
        gball.display(Arrow([0,0,-self.R-0.4], [0,0,-self.R-0.2]))

        // var g = plotselection(self.m, self.top, grade=[0,1]) + plotmesh(self.m0, color=Blue) + gball
        var g = plotmesh(self.m, selection=self.top, grade=0, color=Red) +
                plotmesh(self.m, grade=1, color=Magenta) +
                gball

        g.title = title
        var cam = Camera(sky=Matrix([0,0,1]))
        // var cam = Camera(look_at=Matrix([0,-5,-1]))
        var pov = POVRaytracer(g, camera=cam)
        // var pov = POVRaytracer(g)
        // print pov.look_at
        pov.viewangle=50
        pov.viewpoint=Matrix([0,5,0])
        pov.light=[Matrix([3,3,5]), Matrix([-3,-3,-5]), Matrix([0,0,8]), Matrix([0,0,-8])]  
        pov.render("${title}.pov", display=false, quiet=true)
        // Show(g)
    }

}

var args = System.arguments()
var OmegaInv, phi
if (args.count()==0) {
    OmegaInv = 0.1
    phi = 2.3*Pi/2
}
else {
    OmegaInv = Float(args[0])
    phi = Float(args[1])
}
print "Running simulation for OmegaInv = ${OmegaInv} and Phi = ${phi}..."
var filament = Filament(OmegaInv, phi)
filament.setupOptimizer()
filament.wriggle()
filament.equilibrateWithRefine()

filament.exportCurvatureVsArclength(filename="curvature")
