import meshtools
import optimize
import plot

var R = 1.0 // Radius of sphere

// Initialize the filament with a given value of OmegaInv and Phi,
// the two dimensionless parameters explored in the paper.
var OmegaInv = 0.1 // Strength of bending energy relative to gravity
var Phi = 5 // Angular arclength of filament (2*Pi is a complete circle)

// Other parameters
var regulator = 5 // Strength of mesh regularizer (set emperically)

var N = 20 // Number of elements to discretize the filament
var Nsteps = 10000 // Number of optimization steps
var initialStepSize = 0.001 // Initial stepsize for the optimizer

// Function to jiggle vertex positions by a small amount
fn jiggle(m, noise) {
    for (id in 1...m.count()) {
        var x = m.vertexposition(id)
        x += noise*Matrix([randomnormal(), randomnormal(), randomnormal()])
        m.setvertexposition(id, x)
    }
}

// Visualize the filament and the covering sphere
fn visualize(m, m0) {
    var gball=Graphics()
    gball.display(Sphere([0,0,0], R-0.05)) 
    gball.display(Arrow([0,0,R], [0,0,R+0.2])) 
    gball.display(Arrow([0,0,-R-0.4], [0,0,-R-0.2]))

    return plotmesh(m, grade=[0,1]) + gball + plotmesh(m0, color=Blue)
}

// Generate initial mesh
var m = LineMesh(fn (t) [R*sin(t), 0, R*cos(t)], 0..Phi:Pi/N) 
var m0 = m.clone()

// Setup optimization problem 
var problem = OptimizationProblem(m) 

// Bending energy
var linecurv = LineCurvatureSq()
problem.addenergy(linecurv, prefactor = OmegaInv) 

// Gravitational potential energy
var up = Matrix([0,0,1])
var gravity = LineIntegral(fn (x) x.inner(up)) 
problem.addenergy(gravity) // The prefactor for this is normalized to be 1

// Constrain the total length
problem.addconstraint(Length())

// Constraint for the filament to lie on the sphere
var lc = ScalarPotential(fn (x,y,z) x^2+y^2+z^2-R^2)
problem.addlocalconstraint(lc) 

// Regularization penalty function to ensure similar-sized elements
var eq = EquiElement()
problem.addenergy(eq, prefactor=regulator) 

// Set up the optimizer
var opt = ShapeOptimizer(problem, m) 

// Fixing the top end of the filament
var top = Selection(m, fn(x,y,z) x^2+y^2+(z-R)^2<0.0001)
opt.fix(top)
opt.stepsize = initialStepSize

// Before optimizing, we wriggle the filament a little, to kick it out of the local minimum initial condition
jiggle(m, 0.005)
opt.conjugategradient(Nsteps) 

Show(visualize(m, m0))