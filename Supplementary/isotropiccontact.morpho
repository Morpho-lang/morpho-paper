import meshgen 
import plot 

class Droplet {
    init(sigma, deltasigma) {
        self.sigma = sigma // Isotropic surface tension fluid-air
        self.deltasigma = deltasigma // Difference between surface tension of air-substrate interface and fluid-substrate interface
    }

    initialMesh() {
        var c = CircularDomain([0,0], 1)                          
        var hs = HalfSpaceDomain(Matrix([0,0]), Matrix([0,1]))    
        var dom = c.difference(hs)                                
        var mg = MeshGen(dom, [-1..1:0.2, -1..1:0.2], quiet=true) 
        self.mesh = mg.build()                                    
    }

    initialSelections() {
        self.bnd = Selection(self.mesh, boundary=true)                    
        self.upper = Selection(self.mesh, fn (x,y) x^2+y^2>0.99)          
        self.upper.addgrade(1)                                           
        self.lower = Selection(self.mesh, fn (x,y) y<0.01)                
        self.lower.addgrade(1)                                           
    }

    setupProblem() {
        var problem=OptimizationProblem(self.mesh)

        var llength = Length()
        problem.addenergy(llength, selection=self.upper, prefactor=self.sigma) 
        problem.addenergy(llength, selection=self.lower, prefactor=self.deltasigma)  

        var larea = Area() 
        problem.addconstraint(larea) 

        var lcons = ScalarPotential(fn (x,y) y)
        problem.addlocalconstraint(lcons, selection=self.lower)

        self.problem = problem 
    }

    optimize(maxiterations=500) {
        var opt = ShapeOptimizer(self.problem, self.mesh)
        opt.conjugategradient(maxiterations)
    }

    visualize() {
        return plotmesh(self.mesh, grade=[0,1])
    }
}

var sim = Droplet(20,-4)  

sim.initialMesh()
sim.initialSelections() 
sim.setupProblem() 
sim.optimize() 

Show(sim.visualize())

//Show(plotselection(sim.mesh, sim.upper, grade=[0,1]))