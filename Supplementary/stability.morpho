import meshtools
import plot 
import optimize
import povray

var Nlevels = 3 // Levels of refinement
var Nsteps = 1000 // Maximum number of steps per refinement level

// Create an initial cube
var vertices = [[-0.5, -0.5, -0.5], // Vertex 0
                [ 0.5, -0.5, -0.5], // Vertex 1
                [-0.5,  0.5, -0.5], // Vertex 2
                [ 0.5,  0.5, -0.5], // ...
                [-0.5, -0.5,  0.5],
                [ 0.5, -0.5,  0.5],
                [-0.5,  0.5,  0.5],
                [ 0.5,  0.5,  0.5]]

var faces = [ [0,1,3,2], [4,5,7,6],
              [0,1,5,4], [3,2,6,7],
              [0,2,6,4], [1,3,7,5] ]

var m = PolyhedronMesh(vertices, faces)
m.addgrade(1)

// Set up the problem
var problem = OptimizationProblem(m)
var la = Area()
problem.addenergy(la)

var lv = VolumeEnclosed()
problem.addconstraint(lv)

// Create the optimizer 
var opt = ShapeOptimizer(problem, m)

// Perform the optimization
for (i in 1..Nlevels) {
  opt.conjugategradient(Nsteps)

  if (i==Nlevels) break   
// Refine
  var mr=MeshRefiner([m])
  var refmap = mr.refine()
  for (el in [problem, opt]) el.update(refmap)
  m = refmap[m]
}

// Visualizes an eigenvector of the hessian of the Lagrangian
// mesh - the mesh to use
// vec  - particular eigenvector to visualize given as a column vector 
// val  - eigenvalue to display
fn visualizeEV(mesh, vec, val, scale=nil, color=nil) {
    var col = color 
    if (!col) col = Red 

    var s = scale // If we aren't given a scale, estimate it from the average length of the line elements
    if (!s) s = 0.6*Length().total(mesh)/mesh.count(1)

    var v = vec[0...3*mesh.count()] // Extract spatial part of the eigenvector
    v/=v.norm(Inf) // Normalize by largest value
    v.reshape(3, mesh.count()) // Reshape so that the component associated with 
                               // each vertex is in a different column.

    var g = Graphics() 
    for (id in 0...mesh.count()) {
        var xx = mesh.vertexposition(id)
        var vv = v.column(id)
        if (vv.norm()<1e-6) continue
        g.display(Arrow(xx, xx+s*vv, color=col)) // Draw the arrow
    }

    if (val) {
      // Draw eigenvalue above the mesh
      var zmax=max(mesh.vertexmatrix().transpose().column(2)) // Find highest value of z
      g.display(Text(String(val), [0,0,zmax+0.1], dirn=[1,0,0], vertical=[0,0,1]))
    }

    return g+plotmesh(mesh, grade=1)
}

// Returns the inertia (N+, N-, N0) of a matrix given the list of eigenvalues. 
// tol is the tolerance below which an eigenvalue will be considered as zero.
fn inertia(ev, tol) {
    var np=0, nz=0, nn=0
    for (e in ev) {
        if (e>tol) np+=1
        else if (e<-tol) nn+=1
        else nz+=1
    }
    return (np, nn, nz)
}

// Renders the file
fn render(g, file) {
  g.background = White 
  var pov = POVRaytracer(g)
  pov.viewpoint = -Matrix([4,8,-2]) 
  pov.sky = Matrix([0,0,1])
  pov.viewangle = 20
  pov.render(file)
}

var Ha = la.hessian(m) // Hessian Area
var Hv = lv.hessian(m) // Hessian VolumeEnclosed

var ga = la.gradient(m)
var gv = lv.gradient(m)

var dim = Ha.dimensions() 
ga.reshape(dim[0],1) 
gv.reshape(dim[0],1) 

var lambda = ga.inner(gv)/gv.inner(gv)

var KKT = Matrix([[Ha - lambda*Hv, gv], 
                 [gv.transpose(), 0]])

var es = Matrix(KKT).eigensystem() // Compute eigenvalues and eigenvectors
var ev = es[0]

var tol = 1e-5 // Tolerance for zero eigenvalues
print inertia(ev, tol)

var n = 0
for (e, k in ev) {
  if (abs(e)<tol) {
    var vec = es[1].column(k)
    render(visualizeEV(m, vec, nil), "eigenvector${n}.pov")
    n+=1
  }
}

print m.count() 

// Visualize the result and save
Show(plotmesh(m, grade=2))