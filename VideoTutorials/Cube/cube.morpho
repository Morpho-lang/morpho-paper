import meshtools
import plot 
import optimize

var Nlevels = 1 // Levels of refinement
var Nsteps = 1000 // Maximum number of steps per refinement level

// Create an initial cube
var vertices = [[-0.5, -0.5, -0.5], // Vertex 0
                [ 0.5, -0.5, -0.5], // Vertex 1
                [-0.5,  0.5, -0.5], // Vertex 2
                [ 0.5,  0.5, -0.5], // ...
                [-0.5, -0.5,  0.5],
                [ 0.5, -0.5,  0.5],
                [-0.5,  0.5,  0.5],
                [ 0.5,  0.5,  0.5]]

var faces = [ [0,1,3,2], [4,5,7,6],
              [0,1,5,4], [3,2,6,7],
              [0,2,6,4], [1,3,7,5] ]

var m = PolyhedronMesh(vertices, faces)
m.addgrade(1)

// Set up the problem
var problem = OptimizationProblem(m)
var la = Area()
problem.addenergy(la)

var lv = VolumeEnclosed()
problem.addconstraint(lv)

// Create the optimizer 
var opt = ShapeOptimizer(problem, m)

// Perform the optimization
for (i in 1..Nlevels) {
  opt.conjugategradient(Nsteps)
  if (i==Nlevels) break   
// Refine
  var mr=MeshRefiner([m])
  var refmap = mr.refine()
  for (el in [problem, opt]) el.update(refmap)
  m = refmap[m]
}

// Visualize the result and save
Show(plotmesh(m, grade=2))
m.save("end.mesh")
